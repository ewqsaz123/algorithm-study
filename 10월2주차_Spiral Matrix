import java.util.*;

class Solution {
    
    int[][] move = {{0,1}, {1,0}, {0,-1}, {-1,0}};
    
    public List<Integer> spiralOrder(int[][] matrix) {
        ArrayList<Integer> answer = new ArrayList<>();
        
        
        int[][] visited = new int[matrix.length][matrix[0].length];
        search(matrix, visited, 0, 0, 0, answer);
        
        return answer;
    }
    
    public void search(int[][] matrix, int[][] visited, int m, int a , int b, ArrayList<Integer> answer){
        visited[a][b] = 1;
        answer.add(matrix[a][b]);
        
        
        if(answer.size() == (matrix.length * matrix[0].length)) return;
        
        int i = a + move[m][0];
        int j = b + move[m][1];
        
        if(i>=0 && j>=0 && i<matrix.length && j<matrix[0].length && visited[i][j] == 0){
            search(matrix, visited, m, i, j, answer);
        }else{
            
            while(i<0 || j<0 || i>=matrix.length || j>=matrix[0].length || visited[i][j] == 1) {
                m = (m == (move.length-1))?0:m+1;
                i = a + move[m][0];
                j = b + move[m][1];
            }
            
            search(matrix, visited, m, i, j, answer);
        }
        
    }
    
}
