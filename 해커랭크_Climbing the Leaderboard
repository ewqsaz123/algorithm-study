//https://www.hackerrank.com/challenges/climbing-the-leaderboard/problem?isFullScreen=true

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'climbingLeaderboard' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY ranked
     *  2. INTEGER_ARRAY player
     */

    public static List<Integer> climbingLeaderboard(List<Integer> ranked, List<Integer> player) {
    // Write your code here
            List<Integer> answer = new ArrayList<>();
            TreeSet<Integer> tr= new TreeSet<>();
            PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
            HashMap<Integer, Integer> map = new HashMap<>();
            
            tr.addAll(ranked);
            pq.addAll(ranked);
            int k=1;
            while(!pq.isEmpty()){
                int point = pq.poll();
                if(!map.containsKey(point)) {
                    map.put(point, k++);
                }
            }
            
            for(int i: player){
                Integer gt = tr.ceiling(i);//greater than or equals to i
                Integer lt = tr.floor(i);//lower than or equals to i
                
                if(gt != null && lt != null){//middle score
                    if(gt.intValue() == i) answer.add(map.get(i));
                    else answer.add(map.get(gt)+1);
                }else if(gt != null && lt == null){//top score
                     answer.add(map.get(tr.first())+1);
                }else if(gt == null && lt != null){//bottom score
                     answer.add(1);
                }
                
            }
            
            /* time limit exceed code */ 
            // List<Integer> answer = new ArrayList<>();
            
            // List<Integer> arr = new ArrayList<>();
            // for(int i=0;i<ranked.size();i++){
            //     if(!arr.contains(ranked.get(i))) arr.add(ranked.get(i));
            // }
            // Collections.sort(arr, Collections.reverseOrder());
            // for(int i=0;i<player.size();i++){
            //     if(!arr.contains(player.get(i))) {
            //         arr.add(player.get(i));
            //         Collections.sort(arr, Collections.reverseOrder());
            //     }
            //     answer.add(arr.indexOf(player.get(i))+1);
            // }
            
            return answer;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int rankedCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> ranked = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int playerCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> player = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> result = Result.climbingLeaderboard(ranked, player);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
