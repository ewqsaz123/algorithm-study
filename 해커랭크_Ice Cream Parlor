https://www.hackerrank.com/challenges/icecream-parlor/problem?h_r=internal-search&isFullScreen=true



import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'icecreamParlor' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER m
     *  2. INTEGER_ARRAY arr
     */

    public static List<Integer> icecreamParlor(int m, List<Integer> arr) {
    // Write your code here
        int a1 = 0, a2 = 0;
        List<Integer> answer = new ArrayList<>();
        
        List<Integer> n_arr = new ArrayList<>();
        n_arr.addAll(arr);
        Collections.sort(n_arr);
        int s = 0, e = s+1;
        while(s<e && e<n_arr.size()){
            int sum = n_arr.get(s) + n_arr.get(e);
           if(sum > m) {
               s++;
               e = s+1;
           }else if(sum < m){
               e++;
               if(e>=n_arr.size()){
                   s++;
                   e = s+1;
               }
           }else {
               a1 = n_arr.get(s);
               a2 = n_arr.get(e);
               break;
           }
        }

        //System.out.println(a1+", "+a2+", s="+s +", e="+e);

        for(int i=0;i<arr.size();i++){
            if(arr.get(i) == a1){
                answer.add(i+1);
                break;
            }
        }
        
        for(int i=0;i<arr.size();i++){
            if(arr.get(i) == a2 && answer.get(0) != i+1){
                answer.add(i+1);
                break;
            }
        }
        Collections.sort(answer);

        return answer;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                int m = Integer.parseInt(bufferedReader.readLine().trim());

                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                    .map(Integer::parseInt)
                    .collect(toList());

                List<Integer> result = Result.icecreamParlor(m, arr);

                bufferedWriter.write(
                    result.stream()
                        .map(Object::toString)
                        .collect(joining(" "))
                    + "\n"
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
