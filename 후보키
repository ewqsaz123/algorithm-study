import java.util.*;
import java.util.stream.*;

class Solution {
    int answer = 0;
    ArrayList<String> del_list = new ArrayList<>();
    public int solution(String[][] relation) {
        int n = relation.length;
        int m = relation[0].length;
        
        ArrayList<Integer> list = new ArrayList<>();//탐색을 할 키에 대한 인덱스를 저장할 리스트
        
        for(int i=0;i<m;i++) list.add(i);
        
        for(int i=1;i<=m;i++){
            if(i <= list.size()){
                Collections.sort(list);
                int j = list.get(0);
                //남은 키들 중에서 가장 작은 인덱스 뽑음
                //for(;j<list.size();j++) if(!del_list.contains(list.get(j))) break;
                for(;j<m;j++){
                    findKeys(relation, m, list, i, j);//j부터 시작하는 i개 키 조합을 찾는 메소드 실행
                }
                
            }
        }
        
        return answer;
    }
    
    public void findKeys(String[][] relation, int m, ArrayList<Integer> list, int a, int b){
        
        ArrayList<String> s = selectKeys(Integer.toString(b), b, 1, a, list, new ArrayList<String>());
        
        for(int i=0; i<s.size();i++){
            HashSet<String> set = new HashSet<>();//키가 후보키인지 확인할 셋. 중복없이 들어가는 자료구조
            int[] keys = Arrays.stream(s.get(i).split(",")).mapToInt(Integer::parseInt).toArray();
            
            for(int j=0;j<relation.length;j++){
                StringBuilder sb = new StringBuilder();
                for(int k=0;k<keys.length;k++){
                    sb.append(relation[j][keys[k]]);
                }
                if(set.contains(sb)) break;
                else set.add(sb.toString());
            }
            
            if(set.size() == relation.length) {
                System.out.println(Arrays.toString(keys) +"/"+set);
                boolean isTrue = true;
                for(int w=0; w<del_list.size();w++){
                    if(s.get(i).contains(del_list.get(w))) {
                        isTrue = false;
                        break;
                    }
                }
                if(isTrue) {
                    answer++;
                    del_list.add(s.get(i));
                }
                
                //del_list.addAll(Arrays.stream(keys).boxed().collect(Collectors.toList()));
                System.out.println("삭제"+del_list);
             }
        }
    }
    
    
    //키구성
    public ArrayList<String> selectKeys(String s, int c_j, int c_cnt ,int t_cnt, ArrayList<Integer> list,ArrayList<String> strs){
        
        if(c_cnt == t_cnt) {
            strs.add(s);
        }
            
        for(int i=list.indexOf(c_j)+1;i<list.size();i++){
            //if(del_list.contains(i)) continue;
            selectKeys(s+","+i, i, c_cnt+1, t_cnt, list, strs);
        }
    
        return strs;
     }
    
}
