class Solution {
    boolean answer = false;
    int[][] move = {{0,-1},{1,0},{0,1},{-1,0}};
    public boolean exist(char[][] board, String word) {
               
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[i].length;j++){
                if(board[i][j] == word.charAt(0)){
                    dfs(i, j, board, Character.toString(board[i][j]), word, new int[board.length][board[0].length], 0);
                }
                if(answer) return true;
            }
        }
        
        return false;
    }
    
    public void dfs(int a, int b, char[][] board, String cmp, String word, int[][] visited, int le){
        visited[a][b] = 1;
        if(cmp.equals(word)) {
            answer = true;
            return;
        }
        le++;//다음 문자와 일치하는 애 찾기
        for(int i=0; i<move.length;i++){
            int mi = move[i][0] + a;
            int mj = move[i][1] + b;
            
            if(mi >= 0 && mi < board.length && mj >= 0 && mj < board[0].length){//배열 범위 안에 있는지 확인
                if(board[mi][mj] == word.charAt(le) && visited[mi][mj] != 1){
                    dfs(mi, mj, board, cmp+board[mi][mj], word, visited, le);
                }
            }
        }
        visited[a][b] = 0; //return 시 방문여부 복구
    }
}
